apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni-windows: calico
    csi-proxy: enabled
    windows: enabled
  name: win-gpu
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: win-gpu-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: win-gpu
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: win-gpu
  namespace: default
spec:
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: cluster-identity
  location: southcentralus
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: win-gpu-vnet
  resourceGroup: win-gpu
  subscriptionID: d04efe97-9374-4822-ac22-f38facb77dd3
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: win-gpu-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          feature-gates: WindowsHostProcessContainers=true
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: win-gpu
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: win-gpu-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands: []
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: win-gpu-control-plane
  replicas: 1
  version: 1.24.9
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: win-gpu-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: "${SSH_PUB_KEY_B64_ENCODED}"
      vmSize: Standard_D8as_v5
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: win-gpu-mp-0
  namespace: default
spec:
  clusterName: win-gpu
  replicas: 1
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: win-gpu-mp-0
      clusterName: win-gpu
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: win-gpu-mp-0
      version: 1.24.9
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  name: win-gpu-mp-0
  namespace: default
spec:
  location: southcentralus
  strategy:
    rollingUpdate:
      deletePolicy: Oldest
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    osDisk:
      diskSizeGB: 30
      managedDisk:
        storageAccountType: Premium_LRS
      osType: Linux
    sshPublicKey: "${SSH_PUB_KEY_B64_ENCODED}"
    vmSize: Standard_D8as_v5
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: win-gpu-mp-0
  namespace: default
spec:
  files:
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: win-gpu-mp-0-azure-json
    owner: root:root
    path: /etc/kubernetes/azure.json
    permissions: "0644"
  joinConfiguration:
    nodeRegistration:
      kubeletExtraArgs:
        azure-container-registry-config: /etc/kubernetes/azure.json
        cloud-config: /etc/kubernetes/azure.json
        cloud-provider: azure
      name: '{{ ds.meta_data["local_hostname"] }}'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: cluster-identity-win-gpu
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: 1ea6064d-1028-43e0-baf7-84811d1d1bc9
  clientSecret:
    name: cluster-identity-secret
    namespace: default
  tenantID: 16b3c013-d300-468d-ac64-7eda0820b6d3
  type: ServicePrincipal
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachinePool
metadata:
  name: win-gpu-mp-win-0
  namespace: default
spec:
  clusterName: win-gpu
  replicas: 1
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfig
          name: win-gpu-mp-win-0
      clusterName: win-gpu
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachinePool
        name: win-gpu-mp-win-0
      version: 1.24.9
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachinePool
metadata:
  annotations:
    runtime: containerd
  name: win-gpu-mp-win-0
  namespace: default
spec:
  location: southcentralus
  template:
    vmExtensions:
    - name: NvidiaGpuDriverWindows
      publisher: Microsoft.HpcCompute
      version: '1.2'
    osDisk:
      diskSizeGB: 256
      managedDisk:
        storageAccountType: Standard_LRS
      osType: Windows
    sshPublicKey: "${SSH_PUB_KEY_B64_ENCODED}"
    vmSize: Standard_NC12
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfig
metadata:
  name: win-gpu-mp-win-0
  namespace: default
spec:
  files:
  - contentFrom:
      secret:
        key: worker-node-azure.json
        name: win-gpu-mp-win-0-azure-json
    owner: root:root
    path: c:/k/azure.json
    permissions: "0644"
  - content: Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
    path: C:/defender-exclude-calico.ps1
    permissions: "0744"\
  - content: |-
      $currentVersion=$(containerd --version);
      $version="1.7.0-beta.3";

      $CONTAINERD_URL="https://github.com/containerd/containerd/releases/download/v$version/containerd-$version-windows-amd64.tar.gz"

      # Kubelet service depends on contianerd service so make a best effort attempt to stop it
      Stop-Service kubelet -Force -ErrorAction SilentlyContinue
      Stop-Service containerd -Force

      echo "downloading containerd: $CONTAINERD_URL"
      curl.exe --retry 10 --retry-delay 5 -L "$CONTAINERD_URL" --output "c:/k/containerd.tar.gz"
      tar.exe -zxvf c:/k/containerd.tar.gz -C "c:/Program Files/containerd" --strip-components 1
      Start-Service containerd

      containerd.exe --version
      containerd-shim-runhcs-v1.exe --version
    path: C:/replace-containerd.ps1
    permissions: "0744"
  joinConfiguration:
    nodeRegistration:
      criSocket: npipe:////./pipe/containerd-containerd
      kubeletExtraArgs:
        azure-container-registry-config: c:/k/azure.json
        cloud-config: c:/k/azure.json
        cloud-provider: azure
        feature-gates: WindowsHostProcessContainers=true
        pod-infra-container-image: mcr.microsoft.com/oss/kubernetes/pause:3.4.1
      name: '{{ ds.meta_data["local_hostname"] }}'
  preKubeadmCommands:
  - powershell C:/replace-containerd.ps1
  postKubeadmCommands:
  - nssm set kubelet start SERVICE_AUTO_START
  - powershell C:/defender-exclude-calico.ps1
  users:
  - name: capi
    groups: Administrators
    sshAuthorizedKeys:
    - "${SSH_PUB_KEY}"
